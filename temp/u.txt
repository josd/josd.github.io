### Ubuntu 18.04
rsync -azv /media/jdroo/jdroo3/temp ~
sudo apt install vpnc network-manager-vpnc network-manager-vpnc-gnome
cat ~/temp/vpnc.conf
sudo systemctl restart network-manager.service
sudo apt install colordiff
cp -a ~/temp/.bashrc ~/temp/.colordiffrc ~
. ~/.bashrc
rs ~/temp/.ssh ~
sudo cp -a ~/temp/hosts /etc
chmod +x ~/temp/mkln
sudo ~/temp/mkln
sudo dpkg-reconfigure tzdata
Settings/Region & Language/Input Sources - Belgian (no dead keys)
Settings/Sound/Sound Effects/Alert volume - OFF

wget http://prdownloads.sourceforge.net/hplip/hplip-3.17.11.run
sh hplip-3.17.11.run
hp-setup

find . -name '*.blogic' -exec sh -c 'git mv "$0" "${0%.n3}.blogic"' {} \;

sudo apt install git
git config --global user.name josd
git config --global user.email "josderoo@gmail.com"
git config --global color.ui true
git config --global credential.helper store
git config --global url."https://".insteadOf git://
git config --global push.default simple
mkdir github.com

sudo apt install subversion
svn co
gedit ~/.subversion/config
    use-commit-times = yes
    diff-cmd = colordiff
svn checkout https://svn.code.sf.net/p/eulersharp/code/trunk eyesvn

wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.7.linux-amd64.tar.gz
sudo ln -sf /usr/local/go/bin/go /usr/local/bin
go get -u github.com/odeke-em/drive/cmd/drive
drive init ~/Google\ Drive
cd Google\ Drive
drive pull
++++
rm ~/Google Drive/.gd/drivedb

rs wopeg:~/19* .
rs wopeg:~/20* .

sudo add-apt-repository ppa:openjdk-r/ppa
sudo apt update
sudo apt install openjdk-8-jdk
sudo update-alternatives --config java

sudo apt-add-repository ppa:swi-prolog/stable
sudo apt update
sudo apt install swi-prolog
++++
sudo ppa-purge ppa:swi-prolog/stable

cd ~/github.com
mkdir melgi
cd ~/github.com/melgi
git clone https://github.com/melgi/cturtle
cd cturtle
sudo apt install flex
sudo cp -a ~/temp/FlexLexer.h /usr/include/
make
sudo make install
cd ~/github.com/melgi
git clone https://github.com/melgi/carl
cd carl
make
sudo make install

curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install nodejs
sudo apt install gcc g++ make
curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt update && sudo apt install yarn

download and install https://eid.belgium.be/nl/download-page/165/license?width=770&height=490&top=10
sudo dpkg-reconfigure eid-archive
sudo apt update
sudo apt install eid-mw eid-viewer
Firefox about:preferences#privacy 'Security Devices' Load "Belgium eID PKCS#11 Module" "libbeidpkcs11.so.0"

sudo apt install libnss3-tools
about-eid-mw
modutil -dbdir sql:.pki/nssdb -add "Belgium eID" -libfile /usr/lib/x86_64-linux-gnu/libbeidpkcs11.so.0
modutil -dbdir sql:.pki/nssdb/ -list

firefox-add-ons
    eID Belgium
    https://addons.mozilla.org/nl/firefox/addon/belgium-eid/
    Markdown Viewer Webext
    Forecast: Google Weather
    Adblock Plus
    AddThis
    Delete Bookmark Icons
    Open in Browser
    Hide Tab Bar With One Tab
    Ant Video Downloader
firefox about:config
    browser.urlbar.trimURLs false
    network.http.accept.default text/html,text/turtle,text/n3,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    media.libavcodec.allow-obsolete true

gedit ~/.local/share/mime/packages/text-markdown.xml
    <?xml version="1.0"?>
    <mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'>
      <mime-type type="text/plain">
        <glob pattern="*.md"/>
        <glob pattern="*.mkd"/>
        <glob pattern="*.markdown"/>
      </mime-type>
    </mime-info>
update-mime-database ~/.local/share/mime

sudo apt install silversearcher-ag
sudo apt install meld

sudo apt install indicator-cpufreq
sudo apt install indicator-multiload

sudo apt install cups-pdf
use ~/temp/KOC554U.ppd for morp1506

sudo add-apt-repository ppa:webupd8team/tor-browser
sudo apt update
sudo apt install tor-browser

sudo gedit /usr/share/gtksourceview-4/language-specs/sparql.lang
sudo gedit /usr/share/gtksourceview-4/language-specs/prolog.lang
sudo gedit /usr/share/gtksourceview-4/language-specs/perl.lang

sudo apt install imagemagick
sudo apt install tree
sudo apt install htop
sudo apt install rdesktop
sudo apt install okular
sudo apt install gimp
sudo apt install octave

System Settings - Language Support - English (United States)

sudo gedit /usr/share/X11/xorg.conf.d/20-intel.conf
Section "Device"
        Identifier "card0"
        Driver "intel"
        Option "Backlight" "intel_backlight"
        BusID "PCI:0:2:0"
EndSection

sudo ubuntu-drivers autoinstall
sudo apt install nvidia-cuda-toolkit
wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64-deb
mv cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64_deb cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
sudo apt update
sudo apt upgrade
sudo apt install cuda-9-0

get cuDNN v7.1.4 Developer Library for Ubuntu16.04 (Deb) from https://developer.nvidia.com/cudnn
sudo dpkg -i libcudnn7_7.1.4.18-1+cuda9.0_amd64.deb
gedit ~/.bashrc
    export PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}
    export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
    export CUDA_HOME=/usr/local/cuda-9.0
sudo reboot
nvidia-smi
echo -e "from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())" | python3

sudo apt install python3-pip
sudo pip3 install --upgrade pip
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
sudo python3 get-pip.py --force-reinstall
pip freeze
sudo pip install --upgrade keyring keyrings.alt

echo "deb [arch=amd64] http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal" | sudo tee /etc/apt/sources.list.d/tensorflow-serving.list
curl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | sudo apt-key add -
sudo apt update && sudo apt install tensorflow-model-server

sudo pip install --upgrade tensorflow tensor2tensor tensorflow-serving-api
sudo pip install --upgrade tensorflow-gpu tensorflow-serving-api-gpu

sudo pip install --upgrade pandas sklearn matplotlib oauth2client jupyter plotly pyasn1 html5lib bleach Jinja2 antlr4-python3-runtime pybase62 pygments networkx

sudo pip install --upgrade python-highcharts graphs keras notedown spacy pydot graphviz tables kmapper

sudo pip install --upgrade pillow h5py progressbar2 colorlog tensorflow-plot

sudo pip install --upgrade wheel twine pyopenssl

sudo add-apt-repository ppa:pypy/ppa
sudo apt update
sudo apt install pypy3
wget https://bootstrap.pypa.io/get-pip.py
pypy3 get-pip.py
pypy3 -m pip install antlr4-python3-runtime

sudo apt install openssl libssl-dev

install https://www.dropbox.com/install-linux

sudo apt install aptitude

sudo apt install openssh-server
sudo service ssh status
sudo service ssh start
sudo nano /etc/ssh/sshd_config

sudo apt install sloccount

sudo apt install gnome-session-flashback

sudo apt install w3c-linkchecker

sudo apt install libc6:i386

sudo apt install p7zip-full

sudo apt install clang

curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
source $HOME/.cargo/env
cargo install scryer-prolog
cat ~/temp/hw.pl | scryer-prolog

echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
sudo apt update && sudo apt install bazel

sudo apt install calibre
sudo pip install Xlib
sudo pip install pyautogui
sudo apt install scrot

sudo apt install pandoc

sudo apt install qpdf

sudo add-apt-repository ppa:webupd8team/atom
sudo apt update; sudo apt install atom

sudo apt install freerdp

sudo apt install zip
sudo apt install p7zip-full

sudo apt install antlr4
antlr4 -Dlanguage=Python3 abc.g4

sudo apt install texlive texlive-latex-base texlive-latex-extra texlive-fonts-recommended latexmk hevea
sudo apt install texlive-xetex fonts-inconsolata fonts-symbola texlive-lang-chinese inkscape
sudo apt install texlive-lang-arabic fonts-cns11643-sung
rs ~/temp/.fonts ~

sudo apt install gnumeric

sudo apt install webhttrack

sudo apt install imagemagick
identify IMG-20190911-WA0002.jpg
convert IMG-20190911-WA0002.jpg -crop 1440x1440+0+0 output.jpg
eog output.jpg

sudo apt remove --purge --auto-remove cmake
sudo apt update
sudo apt install -y software-properties-common lsb-release
sudo apt clean all
wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
sudo apt update
... when getting NO_PUBKEY xyz
... sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys xyz
sudo apt install kitware-archive-keyring
sudo rm /etc/apt/trusted.gpg.d/kitware.gpg
sudo apt update
sudo apt install cmake

### local
mvn install:install-file -Dfile=/home/jdroo/temp/ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.4 -Dpackaging=jar
cd ~/sdvsvn/web; mvn package; java -jar target/sdv-ide-1.0.0-SNAPSHOT.jar


### Linux
uname -sri
grep 'processor\|name' /proc/cpuinfo
grep 'MemTotal' /proc/meminfo
uname -a
cat /etc/issue
ip addr
ip route
df -T
http://josd.myopenid.com/
more /etc/timezone
more /etc/default/rcS
stty iutf8
gconf-editor
hostname -i
ifconfig -a
cat /etc/udev/rules.d/70-persistent-net.rules
sudo gedit /etc/dhcp3/dhclient.conf -- send host-name "yourhostname"
sudo gedit /etc/resolv.conf
sudo gedit /etc/hosts
free -m
sudo dd if=/dev/zero of=/swapfile bs=1M count=800
sudo mkswap /swapfile
sudo swapon /swapfile
export http_proxy=http://proxy.ict:8080
/home/amdus/proxy/main.py
alias del='rm -fr'
alias dir='ls -altr'
alias ff='find . | grep'
alias h='history'
alias l='locate'
alias rs='rsync -azv'
alias ts='find . -type f -print0 | xargs -0 grep'
find . -name '.svn' -exec rm -fr {} \;
find . -name '*\?*' -exec rm -fr {} \; -print
find . -depth -name 'CVS' -exec rm -rf '{}' \; -print
sudo chown -R amdus:amdus .
ps -aux
hd your_file
od -t x1 your_file
ls -laR | wc -l
du -skx
openoffice pagebreak Alt-Enter
html tidy service http://cgi.w3.org/cgi-bin/tidytex file.text; evince file.dvi
texi2pdf file.tex #latex file.tex; dvipdf file.dvi
tar -xjf xxx.tar.bz2
tar -xzf xxx.tar.gz
sed -e "s/\$/`echo -e '\r'`/" unixfile > windowsfile
tr -d '\015' < windowsfile > unixfile
wget -nH --tries=1 --mirror "http://us.metamath.org/index.html"
wget -H -r -l 2 "http://us.metamath.org/index.html"
curl -I uri # --head
proxychains pan .. alt.binaries.e-book.technical
pdf2ps ; ps2ascii
du -skx
.. 2> /dev/null
lspci, lsusb, lshw, lsmod
dmesg
sudo killall NetworkManager
iwevent
sudo /etc/init.d/dbus restart
sudo usermod -u 2028 jdroo
more /etc/mtab
id
apt-cache search libicu
sudo adduser --system --home /var/lib/couchdb --no-create-home --shell /bin/bash --group --gecos "CouchDB Administrator" couchdb
~/fi *.java
alsamixer -Dhw
arecord -f cd -D hw:0,0 -d 5 test.wav
aplay test.wav
dpkg -l | grep git-core
dpkg -r git-core
sudo tune2fs -C 5 /dev/sda5   ### Set  the  number of times the filesystem has been mounted
fold -w 62 -s ~/swissues.txt > xx.txt
cd ~/.gconf/apps; mv panel panel.old
kill -STOP <pid>
kill -CONT <pid>
dpkg -l | grep gcc
rpm -qa | grep gcc
date +%s
date +%Y-%m-%dT%H:%M:%S.%N
sudo date +%T -s "12:22:15"
test > test.out 2>&1
sudo lshw
cat /proc/cpuinfo
gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=abc.pdf a.pdf b.pdf c.pdf
lsof -p PID
sed -n '20,30p' /etc/passwd
sed 's/),/),\n/g' file
ldd -v executable
ldconfig /usr/local/lib
ls | grep -v "\.html$"
mvn clean install
iconv -f UTF-8 -t CP1252 file
who -a
strings executable
nm executable
ltrace executable
strace executable
gksu wireshark
wget -q -d -O /dev/null --header "If-Modified-Since: $(date -R)" "$@"
file executable
./configure --help
cat pvm.txt | awk '/===/{getline; print}' | sed 's/   .*//' | grep '.'
pv /dev/zero > /dev/null
rlwrap swipl
sed -n 1,10p file > output-first-10-lines
sed -n 0~10p file > output-each-10th-line
sed 's/\"http\([^"]*\)\"/\<http\1\>/g' file > subst-lit-uri
pdfunite in-1.pdf in-2.pdf in-n.pdf out.pdf
qpdf --pages input.pdf 1-10 -- input.pdf output.pdf
convert 061.JPG -resize 1632x2464 061.JPG
convert eye.png -transparent white transparent.png
screen -ls -r ^ad ^aESC
byobu F2 newwindow F3 prevwindow ^F2 splitscreen ShF3 prevsplit ^F6 remove
sudo usermod -aG sudo jdroo
/usr/lib/nux/unity_support_test -p
sudo apt install build-essential linux-headers-`uname -r` dkms
sudo update-rc.d -f apache2 remove
cat /proc/meminfo
echo 1 > /proc/sys/vm/overcommit_memory
echo 95 > /proc/sys/vm/overcommit_ratio
nano /etc/sysctl.conf
find /var/log -type f -print0 | xargs -0 grep -i oom-kill
echo $?  # previous return code
echo -e "this is\nnice"
history -c && history -w
find . -type f -exec sed -i 's|/etc|/fluid|g' {} +
find . -type f -exec sed -i 's|^PREFIX|@prefix|g; /@prefix/ s|>$|>.|g' {} +
find . -type f -exec sed -i 's|^@prefix|PREFIX|g; /PREFIX/ s|>.$|>|g' {} +
find . -type f -exec sed -i "s/'http\([^']*\)'/'<http\1>'/g" {} +
find . -type f -exec sed -i "s/'urn\([^']*\)'/'<urn\1>'/g" {} +
find . -type f -exec sed -i '/{/ s|^|GRAPH |g' {} +
find . -type f -exec sed -i 's|) log:on| $) log:on|g; /\$) log:on/ s|(|($ |' {} +
find . -type f -exec perl -0777 -pi -e 's/\n    log:closedBy/ log:closedBy/igs' {} +
for f in **/*; do [ -f "$f" ] && [ -z "$(tail -n 1 "$f" | tr -d '[:space:]')" ] && echo "$f ends with empty or whitespace"; done
printf Aladdin:OpenSesame | base64
printf QWxhZGRpbjpPcGVuU2VzYW1l | base64 --decode
sed -i '1 s/^\xef\xbb\xbf//' *.n3
sed -i '/PAT/!d' file
sudo lshw -numeric -C display
lspci | grep -i nvidia
pdftk olddocument.pdf cat 1-4 6-end output newdocument.pdf
pdftk file1.pdf file2.pdf cat output mergedfile.pdf
echo "" |& tee -a test.txt
ssh-add ~/.ssh/id_rsa
upower -i /org/freedesktop/UPower/devices/battery_BAT0
cat del-ra-4.log | sed -n -e 's/^.*> //p' | sed -n -e 's/\\n".*$//p' | sort -u > test_delirium.observation
sed -i 's/SELECTED_KEYWORD-\S*//g' test_sepsis.observation
awk '{print NF}' test_delirium.observation | sort -n | tail -n 1
for file in *; do mv "$file" "${file//delirium/aki}"; done
cat test_answer.ttl | grep -Po "(?<=:predicted )[01]"
qpdf --empty --pages infile.pdf z-1 -- outfile.pdf
for file in *.n3; do git mv "$file" "${file%.n3}.n3s"; done
for file in *.n3.out; do git mv "$file" "${file%.n3.out}.n3s.out"; done
set TIMEFORMAT=%Rs
unset TIMEFORMAT

### docker
wget -qO- https://get.docker.io/ | sh
sudo usermod -aG docker jdroo
logout
sudo gedit /etc/default/docker
DOCKER_OPTS="--dns 10.233.63.202"
sudo service docker start
#sudo vi /var/lib/boot2docker/profile
#  EXTRA_ARGS="--dns 10.233.63.202"
sudo service docker start
docker stop $(docker ps -a -q)
sudo apt remove lxc-docker-1.1.1
cd ~/temp/docker
rs slave1:/home/axgze/tests/docker/eye/Dockerfile .
docker build --no-cache=true -t="jdroo/eye" .
docker run -t -i jdroo/eye /bin/bash
++++++++
docker rm $(docker ps -a -q)
docker rmi $(docker images | grep "^<none>" | awk '{print $3}')
docker rmi $(docker images -q)
++++++++
docker pull eyereasoner/eye
docker run eyereasoner/eye --nope http://n3.restdesc.org/n3/friends.n3 http://n3.restdesc.org/n3/knows-rule.n3 --query http://n3.restdesc.org/n3/query-all.n3
docker run eyereasoner/eye --nope http://eyereasoner.github.io/eye/reasoning/socrates/socrates.n3 --query http://eyereasoner.github.io/eye/reasoning/socrates/socrates-query.n3
docker run --net=host --rm -v $HOME:$HOME -w $(pwd) -ti eyereasoner/eye "$@"
++++++++
docker system prune


### Google Cloud
sudo apt install apt-transport-https ca-certificates gnupg
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
sudo apt update
sudo apt install google-cloud-sdk
sudo gcloud init --console-only
++++++++
gcloud auth login
gcloud projects list
gcloud config set project eye-logica
gcloud config list
gcloud compute instances list
gcloud compute instances start jdr
gcloud compute instances stop jdr


### Lean
curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh
source $HOME/.elan/env
elan self update
elan default leanprover/lean:stable
++++
mkdir gps
cd gps
lake new gps
gedit Main.lean
lake build
.lake/build/bin/gps


### Homebrew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
++++
test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
test -r ~/.bash_profile && echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bash_profile
echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.profile


### Wasmer
sudo apt install libtinfo5
curl https://get.wasmer.io -sSfL | sh
+++
git clone --recursive https://github.com/WebAssembly/wasi-sdk.git
cd wasi-sdk/
NINJA_FLAGS=-v make package
sudo dpkg -i dist/wasi-sdk_16.4g67f8fa515c68_amd64.deb
++++
cd ~/github.com/trealla-prolog/trealla
make clean
WASI=1 NOFFI=1 NOSSL=1 CC=/opt/wasi-sdk/bin/clang make
++++
cd ~/github.com/KNowledgeOnWebScale/retina/
time wasmer run --dir . ~/github.com/trealla-prolog/trealla/tpl -- -g run,halt gps.pl

### network interface
sudo apt install ethtool
ip link show
ethtool -i eth0
sudo apt install lshw
sudo lshw -C network
lspci -v | grep -EiA 12 'eth|enp|network|ethernet|wireless|wifi'
sudo apt install inxi
inxi -n
sudo apt install hwinfo
hwinfo --netcard
sudo apt install kmod
modinfo igc

# bikeshed
bikeshed -f spec index.bs

# gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 20
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/clang 10
sudo update-alternatives --config gcc

# python
sudo apt update && sudo apt upgrade -y
sudo apt install -y software-properties-common build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update
sudo apt install -y python3.12
sudo apt install -y python3.13
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.12 2
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.13 3
sudo update-alternatives --config python
----
curl -sS https://bootstrap.pypa.io/get-pip.py | sudo python
pip3 install --upgrade pip
echo "alias pip=pip3" >> ~/.bashrc
source ~/.bashrc
pip install sympy
pip install --upgrade --force-reinstall numpy
pip install jupyter notebook multiprocess pandas antlr4-python3-runtime ipykernel uritools multidict matplotlib
----
jupyter notebook --no-browser --ip=0.0.0.0
jupyter notebook stop
jupyter server list
rm -rf ~/.local/share/jupyter/runtime/*
pip install --upgrade ipykernel

# unicode ⇑ € © ∀ ∃ ⊥
# https://en.wikipedia.org/wiki/Emoji#In_Unicode ✍️ 👍 😊 😉 😎 😂 😆 😇 😛 😱 🤷 🙏 🚴 🙈 🙉 🙊
