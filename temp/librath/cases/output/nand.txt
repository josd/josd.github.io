Answer:
NAND-only 8-bit add:
  A = 173 (0xAD), B = 219 (0xDB), Cin = 0
  Sum (low 8 bits) = 136 (0x88), Carry-out = 1
  NAND evaluations used = 120

Reason:
NAND is functionally complete. We built NOT, AND, OR, and XOR purely from NAND, then constructed a 1-bit full adder (s = (a⊕b)⊕cin, c = (a·b) + (cin·(a⊕b))). Chaining 8 full adders yields an 8-bit ripple-carry adder. A standard 4-NAND XOR, 2-NAND AND, and 3-NAND OR give ~15 NANDs per bit, so an 8-bit add uses about 8×15 = 120 NAND evaluations (the counter above measures the exact usage).

Check:
PASS — matches Python addition for the pair; exhaustive 4-bit regression = True.
